#!/usr/bin/python3
import sys
import struct
import wrapper
import threading
import time
import os
from wrapper import recv_from_any_link, send_to_link, get_switch_mac, get_interface_name

# Structura de date pentru Tabela MAC
MAC_Table = {}

def read_switch_config(switch_id):
    config_file = f"configs/switch{switch_id}.cfg"
    if not os.path.exists(config_file):
        print(f"Config file {config_file} does not exist")
        return None

    config = {
        "priority": None,
        "interfaces": {}
    }

    with open(config_file, 'r') as file:
        lines = file.readlines()
        config["priority"] = int(lines[0].strip())  # Convertim prioritatea în număr întreg

        for line in lines[1:]:
            parts = line.strip().split()
            interface_name = parts[0]
            vlan_or_trunk = parts[1] if len(parts) > 1 else None
            config["interfaces"][interface_name] = vlan_or_trunk

    return config

def is_unicast(address):
    # Returnează True dacă adresa MAC nu este adresa de broadcast
    return not address.lower() == 'ff:ff:ff:ff:ff:ff'


def process_frame(interface, dest_mac, src_mac, data, length, vlan_id, switch_config):
    MAC_Table[src_mac] = interface

    # Logica de forwarding
    if is_unicast(dest_mac):
        if dest_mac in MAC_Table:
            send_to_link(MAC_Table[dest_mac], data, length)
        else:
            # Forwarding pe toate porturile, cu excepția sursei
            for i in interfaces:
                if i != interface:
                    # id ul de pe care a venit
                    vlan_id_primit = switch_config["interfaces"].get(get_interface_name(interface), 'T')
                    #vlan_id_primit = None
                    #if src_interface_mode != 'T':
                    #    vlan_id_primit = int(src_interface_mode)

                    # catre cine
                    target_mode = switch_config["interfaces"].get(get_interface_name(i), 'T')
                    frame_data = data[:]  # Copiază data pentru a evita modificarea globală

                    if interface == 'T':
                        # Cadru primit pe trunk, decide dacă trebuie să modifici tag-ul VLAN
                        if target_mode != 'T'and vlan_id_primit == target_mode:
                            # Elimină tag-ul VLAN dacă destinația este access cu același VLAN ID
                            frame_data = frame_data[0:12] + frame_data[16:]
                            length = length - 4
                        else:
                            # Cadru primit pe access, adaugă tag-ul VLAN dacă destinația este trunk
                            if target_mode == 'T':
                                frame_data = frame_data #[0:12] + create_vlan_tag(vlan_id_primit) + frame_data[12:]
                                # length = length + 4
                    # Nu trimite între VLAN-uri diferite
                    if interface != 'T':
                        if target_mode == 'T':
                            frame_data = frame_data[0:12] + create_vlan_tag(vlan_id_primit) + frame_data[12:]
                            length = length + 4
                        else:
                            if target_mode != 'T' and vlan_id_primit == target_mode:    
                                frame_data = frame_data[0:12] + frame_data[16:]
                                length = length - 4
                
                    send_to_link(i, frame_data, length)
    else:
        for i in interfaces:
            if i != interface:
                # interfata pe care sa trimita
                vlan_id_primit = switch_config["interfaces"].get(get_interface_name(interface), 'T')
                #vlan_id_primit = None
                #if src_interface_mode != 'T':
                #    vlan_id_primit = int(src_interface_mode)

                target_mode = switch_config["interfaces"].get(get_interface_name(i), 'T')
                frame_data = data[:]  # Copiază data pentru a evita modificarea globală

                if interface == 'T':
                    # Cadru primit pe trunk, decide dacă trebuie să modifici tag-ul VLAN
                    if target_mode != 'T'and vlan_id_primit == target_mode:
                        # Elimină tag-ul VLAN dacă destinația este access cu același VLAN ID
                        frame_data = frame_data[0:12] + frame_data[16:]
                        length = length - 4
                    else:
                        # Cadru primit pe access, adaugă tag-ul VLAN dacă destinația este trunk
                        if target_mode == 'T':
                            frame_data = frame_data #[0:12] + create_vlan_tag(vlan_id_primit) + frame_data[12:]
                            # length = length + 4
                # Nu trimite între VLAN-uri diferite
                if interface != 'T':
                    if target_mode == 'T':
                        frame_data = frame_data[0:12] + create_vlan_tag(vlan_id_primit) + frame_data[12:]
                        length = length + 4
                    else:
                        if target_mode != 'T' and vlan_id_primit == target_mode:    
                            frame_data = frame_data[0:12] + frame_data[16:]
                            length = length - 4
                
                send_to_link(i, frame_data, length)



def parse_ethernet_header(data):
    # Unpack the header fields from the byte array
    #dest_mac, src_mac, ethertype = struct.unpack('!6s6sH', data[:14])
    dest_mac = data[0:6]
    src_mac = data[6:12]
    # Extract ethertype. Under 802.1Q, this may be the bytes from the VLAN TAG
    ether_type = (data[12] << 8) + data[13]

    vlan_id = -1
    # Check for VLAN tag (0x8100 in network byte order is b'\x81\x00')
    if ether_type == 0x8200:
        vlan_tci = int.from_bytes(data[14:16], byteorder='big')
        vlan_id = vlan_tci & 0x0FFF
        ether_type = (data[16] << 8) + data[17]

    return dest_mac, src_mac, ether_type, vlan_id

def create_vlan_tag(vlan_id):
    # 0x8100 for the Ethertype for 802.1Q
    # vlan_id & 0x0FFF ensures that only the last 12 bits are used
    return struct.pack('!H', 0x8200) + struct.pack('!H', vlan_id & 0x0FFF)

def send_bdpu_every_sec():
    while True:
        # TODO Send BDPU every second if necessary
        time.sleep(1)

def main():
    # init returns the max interface number. Our interfaces
    # are 0, 1, 2, ..., init_ret value + 1
    switch_id = sys.argv[1]
    switch_config = read_switch_config(switch_id)
    if switch_config is None:
        sys.exit(1)

    print(f"Switch ID: {switch_id}")
    print(f"Switch Priority: {switch_config['priority']}")
    print("Interfaces Configuration:")
    for interface, config in switch_config["interfaces"].items():
        print(f"  {interface}: {config}")

    num_interfaces = wrapper.init(sys.argv[2:])
    global interfaces
    interfaces = range(0, num_interfaces)

    # in plus
    for i in interfaces:
        interface_name = get_interface_name(i)
        target_mode = switch_config["interfaces"].get(interface_name, 'T')
        print(f"Interface: {interface_name}, Mode: {target_mode}")


    print("# Starting switch with id {}".format(switch_id), flush=True)
    print("[INFO] Switch MAC", ':'.join(f'{b:02x}' for b in get_switch_mac()))

    t = threading.Thread(target=send_bdpu_every_sec)
    t.start()

    # Create and start a new thread that deals with sending BDPU
    for i in interfaces:
        print(get_interface_name(i))

    # Printing interface names
    while True:
        # Note that data is of type bytes([...]).
        # b1 = bytes([72, 101, 108, 108, 111])  # "Hello"
        # b2 = bytes([32, 87, 111, 114, 108, 100])  # " World"
        # b3 = b1[0:2] + b[3:4].
        interface, data, length = recv_from_any_link()
        
        dest_mac, src_mac, ethertype, vlan_id = parse_ethernet_header(data)

        # Print the MAC src and MAC dst in human readable format
        dest_mac = ':'.join(f'{b:02x}' for b in dest_mac)
        src_mac = ':'.join(f'{b:02x}' for b in src_mac)


        # Note. Adding a VLAN tag can be as easy as
        # tagged_frame = data[0:12] + create_vlan_tag(10) + data[12:]
        print(f'Destination MAC: {dest_mac}')
        print(f'Source MAC: {src_mac}')
        print(f'EtherType: {ethertype}')
        print(f'Vlan id: {vlan_id}')
        print("Received frame of size {} on interface {}".format(length, interface), flush=True)

        # Procesează și forward frame-ul
        process_frame(interface, dest_mac, src_mac, data, length, vlan_id, switch_config)

        # TODO: Implement VLAN support
        # TODO: Implement STP support

        # data is of type bytes.
        # send_to_link(i, data, length)

if __name__ == "__main__":
    main()
